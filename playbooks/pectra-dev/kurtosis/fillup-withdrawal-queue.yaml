
id: fillup-withdrawal-queue
name: "Fillup withdrawal queue"
timeout: 1h
config:
  walletPrivkey: ""
  withdrawalCount: 1000  # number of withdrawals to send
  withdrawalMaxIndex: 100 # number of wallets to send from
  withdrawalTxFee: 10000000000000000  # 0.01 ETH
  throughputPerIndex: 20
  maxPendingPerIndex: 40
  walletSeed: ""
  sourceStartValidatorIndex: 0
  sourceValidatorCount: 0
  withdrawAmount: 1 # 1 wei
tasks:
- name: check_clients_are_healthy
  title: "Check if at least one client is ready"
  timeout: 5m
  config:
    minClientCount: 1

- name: run_shell
  id: prepare
  title: "Prepare workers"
  config:
    envVars:
      withdrawalCount: "withdrawalCount"
      withdrawalMaxIndex: "withdrawalMaxIndex"
    command: |
      withdrawalCount=$(echo $withdrawalCount | jq -r .)
      withdrawalMaxIndex=$(echo $withdrawalMaxIndex | jq -r .)

      minwithdrawalCount=$(expr $withdrawalCount \/ $withdrawalMaxIndex)
      plusOnewithdrawalCount=$(expr $withdrawalCount - $minwithdrawalCount \* $withdrawalMaxIndex)

      workers="[]"

      while read index; do
        withdrawalCount=$minwithdrawalCount
        if [ "$index" -lt "$plusOnewithdrawalCount" ]; then
          withdrawalCount=$(expr $withdrawalCount + 1)
        fi

        worker=$(echo "{\"index\": $index, \"withdrawalCount\": $withdrawalCount}" )
        workers=$(echo $workers | jq -c ". += [$worker]")
      done <<< $(seq 0 1 $(expr $withdrawalMaxIndex - 1))

      echo "::set-out-json workers $workers"

- name: run_task_matrix
  title: "Generate ${withdrawalCount} withdrawals for first ${withdrawalMaxIndex} keys"
  configVars:
    matrixValues: "tasks.prepare.outputs.workers"
  config:
    runConcurrent: true
    matrixVar: "worker"
    task:
      name: run_tasks
      title: "Generate ${{worker.withdrawalCount}} withdrawals for key ${{worker.index}}"
      config:
        tasks:
        - name: check_consensus_validator_status
          title: "Get validator pubkey for key ${{worker.index}}"
          id: "get_validator"
          timeout: 1m
          configVars:
            validatorIndex: "worker.index"

        - name: generate_child_wallet
          id: withdrawal_wallet
          title: "Generate wallet for lifecycle test"
          configVars:
            walletSeed: "| \"fillup-withdrawal-queue-\" + .walletSeed + (.worker.index | tostring)"
            prefundMinBalance: "| (.worker.withdrawalCount + 1) * 1000000000000000000"
            privateKey: "walletPrivkey"
        
        - name: sleep
          title: "Sleep 10s to ensure propagation of last block with wallet fundings to all clients"
          config:
            duration: 10s

        - name: run_task_options
          title: "Generate ${{worker.withdrawalCount}} top up withdrawals with 1 ETH each"
          config:
            task:
              name: generate_withdrawal_requests
              title: "Generate withdrawals for key ${{worker.index}} (${{tasks.get_validator.outputs.pubkey}})"
              config:
                awaitReceipt: true
                failOnReject: true
              configVars:
                limitTotal: "worker.withdrawalCount"
                limitPerSlot: "throughputPerIndex"
                limitPending: "maxPendingPerIndex"
                walletPrivkey: "tasks.withdrawal_wallet.outputs.childWallet.privkey"
                txAmount: "withdrawalTxFee"
                sourceStartValidatorIndex: "sourceStartValidatorIndex"
                sourceIndexCount: "sourceValidatorCount"
                withdrawAmount: "withdrawAmount"

