
id: fillup-consolidation-queue
name: "Fillup consolidation queue"
timeout: 1h
config:
  walletPrivkey: ""
  consolidationCount: 1000  # number of consolidations to send
  consolidationMaxIndex: 100 # number of wallets to send from
  consolidationTxFee: 10000000000000000  # 0.01 ETH
  throughputPerIndex: 20
  maxPendingPerIndex: 40
  walletSeed: ""
  sourceStartValidatorIndex: 0
  sourceValidatorCount: 0
  targetValidatorIndex: 0
tasks:
- name: check_clients_are_healthy
  title: "Check if at least one client is ready"
  timeout: 5m
  config:
    minClientCount: 1

- name: run_shell
  id: prepare
  title: "Prepare workers"
  config:
    envVars:
      consolidationCount: "consolidationCount"
      consolidationMaxIndex: "consolidationMaxIndex"
    command: |
      consolidationCount=$(echo $consolidationCount | jq -r .)
      consolidationMaxIndex=$(echo $consolidationMaxIndex | jq -r .)

      minconsolidationCount=$(expr $consolidationCount \/ $consolidationMaxIndex)
      plusOneconsolidationCount=$(expr $consolidationCount - $minconsolidationCount \* $consolidationMaxIndex)

      workers="[]"

      while read index; do
        consolidationCount=$minconsolidationCount
        if [ "$index" -lt "$plusOneconsolidationCount" ]; then
          consolidationCount=$(expr $consolidationCount + 1)
        fi

        worker=$(echo "{\"index\": $index, \"consolidationCount\": $consolidationCount}" )
        workers=$(echo $workers | jq -c ". += [$worker]")
      done <<< $(seq 0 1 $(expr $consolidationMaxIndex - 1))

      echo "::set-out-json workers $workers"

- name: run_task_matrix
  title: "Generate ${consolidationCount} consolidations for first ${consolidationMaxIndex} keys"
  configVars:
    matrixValues: "tasks.prepare.outputs.workers"
  config:
    runConcurrent: true
    matrixVar: "worker"
    task:
      name: run_tasks
      title: "Generate ${{worker.consolidationCount}} consolidations for key ${{worker.index}}"
      config:
        tasks:
        - name: check_consensus_validator_status
          title: "Get validator pubkey for key ${{worker.index}}"
          id: "get_validator"
          timeout: 1m
          configVars:
            validatorIndex: "worker.index"

        - name: generate_child_wallet
          id: consolidationor_wallet
          title: "Generate wallet for lifecycle test"
          configVars:
            walletSeed: "| \"fillup-consolidation-queue-\" + .walletSeed + (.worker.index | tostring)"
            prefundMinBalance: "| (.worker.consolidationCount + 1) * 1000000000000000000"
            privateKey: "walletPrivkey"
        
        - name: sleep
          title: "Sleep 10s to ensure propagation of last block with wallet fundings to all clients"
          config:
            duration: 10s

        - name: run_task_options
          title: "Generate ${{worker.consolidationCount}} top up consolidations with 1 ETH each"
          config:
            task:
              name: generate_consolidations
              title: "Generate consolidations for key ${{worker.index}} (${{tasks.get_validator.outputs.pubkey}})"
              config:
                awaitReceipt: true
                failOnReject: true
              configVars:
                limitTotal: "worker.consolidationCount"
                limitPerSlot: "throughputPerIndex"
                limitPending: "maxPendingPerIndex"
                walletPrivkey: "tasks.consolidationor_wallet.outputs.childWallet.privkey"
                txAmount: "consolidationTxFee"
                sourceStartValidatorIndex: "sourceStartValidatorIndex"
                sourceIndexCount: "sourceValidatorCount"
                targetValidatorIndex: "targetValidatorIndex"

