
id: eip7002-all
name: "EIP7002 test (el triggerable exits)"
timeout: 72h
config:
  walletPrivkey: ""
  validatorMnemonic: "giant issue aisle success illegal bike spike question tent bar rely arctic volcano long crawl hungry vocal artwork sniff fantasy very lucky have athlete"
  validatorStartIndex: 0
  useExistingValidators: false
  depositContract: "0x00000000219ab540356cBB839Cbe05303d7705Fa"
tasks:
- name: check_clients_are_healthy
  title: "Check if at least one client is ready"
  timeout: 5m
  config:
    minClientCount: 1

# wait for electra activation
- name: get_consensus_specs
  id: get_specs
  title: "Get consensus chain specs"
- name: check_consensus_slot_range
  title: "Wait for electra activation"
  timeout: 1h
  configVars:
    minEpochNumber: "tasks.get_specs.outputs.specs.ELECTRA_FORK_EPOCH"

# get wallet details
- name: get_wallet_details
  id: wallet_details
  configVars:
    privateKey: "walletPrivkey"

# generate 50 test validators & wait for activation
- name: run_tasks
  title: "Generate test validators & wait for activation"
  if: "useExistingValidators == false"
  config:
    stopChildOnResult: false
    tasks:

    # generate random mnemonic
    - name: get_random_mnemonic
      id: test_mnemonic
      title: "Generate random mnemonic"
    - name: run_shell
      title: "Use generated random mnemonic for tests"
      config:
        envVars:
          MNEMONIC: "tasks.test_mnemonic.outputs.mnemonic"
        command: |
          # override the validatorMnemonic variable with the generated random mnemonic
          echo "::set-json validatorMnemonic ${MNEMONIC}"
          echo "::set-json validatorStartIndex 0"

    # generate child wallet
    - name: generate_child_wallet
      id: depositor_wallet
      title: "Generate wallet for new deposits"
      config:
        walletSeed: "eip7002-all"
        prefundMinBalance: 1601000000000000000000 # ensure 1601 ETH
      configVars:
        privateKey: "walletPrivkey"

    # generate deposits
    - name: generate_deposits
      id: new_deposits
      title: "Generate 10 deposits with 32 ETH each and 0x00 withdrawal credentials"
      config:
        limitTotal: 10
        depositAmount: 32
        awaitReceipt: true
        failOnReject: true
      configVars:
        walletPrivkey: "tasks.depositor_wallet.outputs.childWallet.privkey"
        mnemonic: "validatorMnemonic"
        depositContract: "depositContract"

    # wait for validators to be active
    - name: run_tasks
      title: "Wait for validators to be active"
      config:
        stopChildOnResult: true
        tasks:
        - name: check_consensus_validator_status
          title: "Wait for validators to be active"
          timeout: 24h
          config:
            validatorStatus:
            - active_ongoing
          configVars:
            validatorPubKey: "tasks.new_deposits.outputs.validatorPubkeys[-1]"

# get pubkeys for the test validators
- name: get_pubkeys_from_mnemonic
  id: validator_pubkeys
  title: "Get test validator pubkeys"
  config:
    count: 10
  configVars:
    startIndex: "validatorStartIndex"
    mnemonic: "validatorMnemonic"

# wait for exitability
- name: run_tasks
  title: "Wait for validators to be exitable (${{ tasks.get_specs.outputs.specs.SHARD_COMMITTEE_PERIOD }} epochs)"
  config:
    stopChildOnResult: true
    tasks:
    - name: check_consensus_validator_status
      title: "Get validator info for last key"
      id: last_validator_info
      timeout: 1m
      config:
        validatorStatus:
        - active_ongoing
      configVars:
        validatorPubKey: "tasks.validator_pubkeys.outputs.pubkeys[-1]"
    - name: check_consensus_slot_range
      title: "Wait for validators to be exitable (epoch >= ${{ |(.tasks.last_validator_info.outputs.validator.validator.activation_epoch | tonumber) + (.tasks.get_specs.outputs.specs.SHARD_COMMITTEE_PERIOD | tonumber) }})"
      timeout: 28h  # 256 epochs = ~27.3h
      configVars:
        minEpochNumber: "|(.tasks.last_validator_info.outputs.validator.validator.activation_epoch | tonumber) + (.tasks.get_specs.outputs.specs.SHARD_COMMITTEE_PERIOD | tonumber)"


## all preparations are done, now we can start the actual tests
- name: run_tasks_concurrent
  title: "Run eip 7002 tests"
  id: tests
  config:
    failTaskCount: 0
    failOnUndecided: true
    tasks:

    # Test1: Submit a exit request from an address with 0x00 credentials, assert no exit
    # keys: 0
    - name: run_tasks
      title: "Test1: Submit a exit request from an address with 0x00 credentials, assert no exit"
      config:
        tasks:
        - name: run_task_background
          title: "Generate EL triggered exit for key 0 & track inclusion"
          timeout: 10m
          config:
            onBackgroundComplete: failOrIgnore
            backgroundTask:
              name: generate_withdrawal_requests
              title: "Send EL triggered exit transaction for key 0"
              config:
                limitTotal: 1
                withdrawAmount: 0 # 0 ETH
                awaitReceipt: true
                failOnReject: true
              configVars:
                sourcePubkey: "tasks.validator_pubkeys.outputs.pubkeys[0]"
                walletPrivkey: "walletPrivkey"
            foregroundTask:
              name: check_consensus_block_proposals
              title: "Wait for inclusion of EL triggered exit request for key 0"
              config:
                minWithdrawalRequestCount: 1
              configVars:
                expectWithdrawalRequests: "| [{validatorPubkey: .tasks.validator_pubkeys.outputs.pubkeys[0], sourceAddress: .tasks.wallet_details.outputs.address, amount: 0}]"

        - name: sleep
          title: "Wait for EL triggered exit to be processed"
          config:
            duration: 20m

        - name: check_consensus_validator_status
          title: "Check if key 0 is still active"
          config:
            failOnCheckMiss: true
            validatorStatus:
            - active_ongoing
          configVars:
            validatorPubKey: "tasks.validator_pubkeys.outputs.pubkeys[0]"

    # Test2: Submit a exit request from an address with 0x01 credentials, assert exit
    # keys: 1
    - name: run_tasks
      title: "Test2: Submit a exit request from an address with 0x01 credentials, assert exit"
      config:
        tasks:
        # generate BLS change & wait for inclusion
        - name: run_task_background
          title: "Generate BLS change for key 1 & track inclusion"
          timeout: 10m
          config:
            onBackgroundComplete: failOrIgnore
            backgroundTask:
              name: generate_bls_changes
              title: "Send BLS change for key 1 (0x01 credentials)"
              config:
                limitTotal: 1
                indexCount: 1
              configVars:
                mnemonic: "validatorMnemonic"
                targetAddress: "tasks.wallet_details.outputs.address"
                startIndex: "validatorStartIndex + 1"
            foregroundTask:
              name: check_consensus_block_proposals
              title: "Wait for inclusion of BLS change for key 1"
              config:
                minBlsChangeCount: 1
              configVars:
                expectBlsChanges: "| [{publicKey: .tasks.validator_pubkeys.outputs.pubkeys[1], address: .tasks.wallet_details.outputs.address}]"

        # generate withdrawal & wait for inclusion
        - name: run_task_background
          title: "Generate EL triggered exit for key 1 & track inclusion"
          timeout: 10m
          config:
            onBackgroundComplete: failOrIgnore
            backgroundTask:
              name: generate_withdrawal_requests
              title: "Send EL triggered exit transaction for key 1"
              config:
                limitTotal: 1
                withdrawAmount: 0 # 0 ETH - exit
                awaitReceipt: true
                failOnReject: true
              configVars:
                sourcePubkey: "tasks.validator_pubkeys.outputs.pubkeys[1]"
                walletPrivkey: "walletPrivkey"
            foregroundTask:
              name: check_consensus_block_proposals
              title: "Wait for inclusion of EL triggered exit request for key 1"
              config:
                minWithdrawalRequestCount: 1
              configVars:
                expectWithdrawalRequests: "| [{validatorPubkey: .tasks.validator_pubkeys.outputs.pubkeys[1], sourceAddress: .tasks.wallet_details.outputs.address, amount: 0}]"

        # wait for exit to be processed
        - name: check_consensus_validator_status
          title: "Wait for key 1 to exit"
          timeout: 1h
          config:
            validatorStatus:
            - active_exiting
            - exited_unslashed
          configVars:
            validatorPubKey: "tasks.validator_pubkeys.outputs.pubkeys[1]"

    # Test3: Submit a exit request from an address with 0x02 credentials, assert exit
    # keys: 2
    - name: run_tasks
      title: "Test3: Submit a exit request from an address with 0x02 credentials, assert exit"
      config:
        tasks:
        # generate BLS change & wait for inclusion
        - name: run_task_background
          title: "Generate BLS change for key 2 & track inclusion"
          timeout: 10m
          config:
            onBackgroundComplete: failOrIgnore
            backgroundTask:
              name: generate_bls_changes
              title: "Send BLS change for key 2 (0x02 credentials)"
              config:
                limitTotal: 1
                indexCount: 1
              configVars:
                mnemonic: "validatorMnemonic"
                targetAddress: "tasks.wallet_details.outputs.address"
                startIndex: "validatorStartIndex + 2"
            foregroundTask:
              name: check_consensus_block_proposals
              title: "Wait for inclusion of BLS change for key 2"
              config:
                minBlsChangeCount: 1
              configVars:
                expectBlsChanges: "| [{publicKey: .tasks.validator_pubkeys.outputs.pubkeys[2], address: .tasks.wallet_details.outputs.address}]"

        # generate self consolidation for key 2 & wait for inclusion
        - name: run_task_background
          title: "Generate self consolidation for key 2 & track inclusion"
          timeout: 10m
          config:
            onBackgroundComplete: failOrIgnore
            backgroundTask:
              name: generate_consolidations
              title: "Generate 1 self consolidation (key 2)"
              config:
                limitTotal: 1
                sourceStartIndex: 2
                sourceIndexCount: 1
                awaitReceipt: true
                failOnReject: true
              configVars:
                sourceMnemonic: "validatorMnemonic"
                targetPublicKey: "tasks.validator_pubkeys.outputs.pubkeys[2]"
                sourceStartIndex: "validatorStartIndex + 2"
                walletPrivkey: "walletPrivkey"

            foregroundTask:
              name: check_consensus_block_proposals
              title: "Wait for inclusion of self consolidation request for key 2"
              config:
                minConsolidationRequestCount: 1
              configVars:
                expectConsolidationRequests: "| [{sourceAddress: .tasks.wallet_details.outputs.address, sourcePubkey: .tasks.validator_pubkeys.outputs.pubkeys[2]}]"

        # check if key 2 has 0x02 credentials
        - name: check_consensus_validator_status
          title: "Get validator info for key 2 (expect 0x02 credentials)"
          id: key2_status
          timeout: 30m
          config:
            withdrawalCredsPrefix: "0x02"
            validatorStatus:
            - active_ongoing
          configVars:
            validatorPubKey: "tasks.validator_pubkeys.outputs.pubkeys[2]"
        - name: run_shell
          title: "Check if key 2 has 0x02 credentials"
          config:
            envVars:
              validator: "tasks.key2_status.outputs.validator"
            command: |
              withdrawal_creds=$(echo "$validator" | jq -r '.validator.withdrawal_credentials')
              echo "Withdrawal credentials: $withdrawal_creds"

              if [[ ! "$withdrawal_creds" == "0x02"* ]]; then
                echo "Invalid withdrawal credentials! expected: 0x02*, got: $withdrawal_creds"
                exit 1
              fi

        # generate withdrawal & wait for inclusion
        - name: run_task_background
          title: "Generate EL triggered exit for key 2 & track inclusion"
          timeout: 10m
          config:
            onBackgroundComplete: failOrIgnore
            backgroundTask:
              name: generate_withdrawal_requests
              title: "Send EL triggered exit transaction for key 2"
              config:
                limitTotal: 1
                withdrawAmount: 0 # 0 ETH - exit
                awaitReceipt: true
                failOnReject: true
              configVars:
                sourcePubkey: "tasks.validator_pubkeys.outputs.pubkeys[2]"
                walletPrivkey: "walletPrivkey"
            foregroundTask:
              name: check_consensus_block_proposals
              title: "Wait for inclusion of EL triggered exit request for key 2"
              config:
                minWithdrawalRequestCount: 1
              configVars:
                expectWithdrawalRequests: "| [{validatorPubkey: .tasks.validator_pubkeys.outputs.pubkeys[2], sourceAddress: .tasks.wallet_details.outputs.address, amount: 0}]"

        # wait for exit to be processed
        - name: check_consensus_validator_status
          title: "Wait for key 2 to exit"
          timeout: 1h
          config:
            validatorStatus:
            - active_exiting
            - exited_unslashed
          configVars:
            validatorPubKey: "tasks.validator_pubkeys.outputs.pubkeys[2]"

    # Test4: Submit a partial 1 ETH withdrawal request from an address with 0x01 credentials, assert no withdrawal
    # keys: 3
    - name: run_tasks
      title: "Test4: Submit a partial 1 ETH withdrawal request from an address with 0x01 credentials, assert no withdrawal"
      config:
        tasks:
        # generate BLS change & wait for inclusion
        - name: run_task_background
          title: "Generate BLS change for key 3 & track inclusion"
          timeout: 10m
          config:
            onBackgroundComplete: failOrIgnore
            backgroundTask:
              name: generate_bls_changes
              title: "Send BLS change for key 3 (0x01 credentials)"
              config:
                limitTotal: 1
                indexCount: 1
              configVars:
                mnemonic: "validatorMnemonic"
                targetAddress: "tasks.wallet_details.outputs.address"
                startIndex: "validatorStartIndex + 3"
            foregroundTask:
              name: check_consensus_block_proposals
              title: "Wait for inclusion of BLS change for key 3"
              config:
                minBlsChangeCount: 1
              configVars:
                expectBlsChanges: "| [{publicKey: .tasks.validator_pubkeys.outputs.pubkeys[3], address: .tasks.wallet_details.outputs.address}]"

        # wait for balance to be <= 32ETH (await withdrawal after bls change)
        - name: check_consensus_validator_status
          title: "Wait for key 3 balance to be <= 32.01 ETH"
          id: key3_status
          timeout: 30m
          config:
            validatorStatus:
            - active_ongoing
            maxValidatorBalance: 32010000000
          configVars:
            validatorPubKey: "tasks.validator_pubkeys.outputs.pubkeys[3]"

        # generate withdrawal & wait for inclusion
        - name: run_task_background
          title: "Generate EL triggered partial withdrawal for key 3 & track inclusion"
          timeout: 10m
          config:
            onBackgroundComplete: failOrIgnore
            backgroundTask:
              name: generate_withdrawal_requests
              title: "Send EL triggered withdrawal transaction for key 3"
              config:
                limitTotal: 1
                withdrawAmount: 1000000000 # 1 ETH
                awaitReceipt: true
                failOnReject: true
              configVars:
                sourcePubkey: "tasks.validator_pubkeys.outputs.pubkeys[3]"
                walletPrivkey: "walletPrivkey"
            foregroundTask:
              name: check_consensus_block_proposals
              title: "Wait for inclusion of EL triggered withdrawal request for key 3"
              config:
                minWithdrawalRequestCount: 1
              configVars:
                expectWithdrawalRequests: "| [{validatorPubkey: .tasks.validator_pubkeys.outputs.pubkeys[3], sourceAddress: .tasks.wallet_details.outputs.address, amount: 1000000000}]"

        # check chain for 30 minutes, expect no withdrawal with >= 0.1 ETH for key 3
        - name: run_task_options
          title: "Monitor chain for 30min, expect no withdrawal with >= 0.1 ETH for key 3"
          config:
            expectFailure: true
            task:
              name: check_consensus_block_proposals
              title: "Check for >= 0.1 ETH withdrawal for key 3 (expect failure)"
              timeout: 30m
              config:
                minWithdrawalCount: 1
                checkLookback: 0
              configVars:
                expectWithdrawals: "| [{publicKey: .tasks.validator_pubkeys.outputs.pubkeys[3], address: .tasks.wallet_details.outputs.address, minAmount: 100000000}]"

    # Test5: Submit a partial 1 ETH withdrawal request from an address with 0x02 credentials and balance >= 33 ETH, assert withdrawal
    # keys: 4
    - name: run_tasks
      title: "Test5: Submit a partial 1 ETH withdrawal request from an address with 0x02 credentials and balance >= 33 ETH, assert withdrawal"
      config:
        tasks:
        # generate BLS change & wait for inclusion
        - name: run_task_background
          title: "Generate BLS change for key 4 & track inclusion"
          timeout: 10m
          config:
            onBackgroundComplete: failOrIgnore
            backgroundTask:
              name: generate_bls_changes
              title: "Send BLS change for key 4 (0x01 credentials)"
              config:
                limitTotal: 1
                indexCount: 1
              configVars:
                mnemonic: "validatorMnemonic"
                targetAddress: "tasks.wallet_details.outputs.address"
                startIndex: "validatorStartIndex + 4"
            foregroundTask:
              name: check_consensus_block_proposals
              title: "Wait for inclusion of BLS change for key 4"
              config:
                minBlsChangeCount: 1
              configVars:
                expectBlsChanges: "| [{publicKey: .tasks.validator_pubkeys.outputs.pubkeys[4], address: .tasks.wallet_details.outputs.address}]"

        # generate self consolidation for key 4 & wait for inclusion
        - name: run_task_background
          title: "Generate self consolidation for key 4 & track inclusion"
          timeout: 10m
          config:
            onBackgroundComplete: failOrIgnore
            backgroundTask:
              name: generate_consolidations
              title: "Generate 1 self consolidation (key 4)"
              config:
                limitTotal: 1
                sourceIndexCount: 1
                awaitReceipt: true
                failOnReject: true
              configVars:
                sourceMnemonic: "validatorMnemonic"
                targetPublicKey: "tasks.validator_pubkeys.outputs.pubkeys[4]"
                sourceStartIndex: "validatorStartIndex + 4"
                walletPrivkey: "walletPrivkey"

            foregroundTask:
              name: check_consensus_block_proposals
              title: "Wait for inclusion of self consolidation request for key 4"
              config:
                minConsolidationRequestCount: 1
              configVars:
                expectConsolidationRequests: "| [{sourceAddress: .tasks.wallet_details.outputs.address, sourcePubkey: .tasks.validator_pubkeys.outputs.pubkeys[4]}]"

        # generate top-up deposit for key 4 (add 2 ETH) & wait for inclusion
        - name: run_task_background
          title: "Generate top-up deposit for key 4 & track inclusion"
          timeout: 10m
          config:
            onBackgroundComplete: failOrIgnore
            backgroundTask:
              name: generate_deposits
              title: "Generate top-up deposit for key 4"
              config:
                limitTotal: 1
                indexCount: 1
                depositAmount: 2
                awaitReceipt: true
                failOnReject: true
                topUpDeposit: true
              configVars:
                publicKey: "tasks.validator_pubkeys.outputs.pubkeys[4]"
                walletPrivkey: "walletPrivkey"
                depositContract: "depositContract"
            foregroundTask:
              name: check_consensus_block_proposals
              title: "Wait for inclusion of top-up deposit for key 4"
              config:
                minDepositRequestCount: 1
              configVars:
                expectDepositRequests: "| [{publicKey: .tasks.validator_pubkeys.outputs.pubkeys[4], amount: 2000000000}]"

        # wait for topup deposit to be processed
        - name: check_consensus_validator_status
          title: "Wait for key 4 balance to increase > 33 ETH"
          id: key4_status
          timeout: 4h
          config:
            validatorStatus:
            - active_ongoing
            minValidatorBalance: 33000000000
            withdrawalCredsPrefix: "0x02"
          configVars:
            validatorPubKey: "tasks.validator_pubkeys.outputs.pubkeys[4]"

        # check if key 4 has 0x02 credentials
        - name: run_shell
          title: "Check if key 4 has 0x02 credentials"
          config:
            envVars:
              validator: "tasks.key4_status.outputs.validator"
            command: |
              balance=$(echo "$validator" | jq -r '.balance')
              echo "Balance: $balance"

              if [ "$balance" -lt 33000000000 ]; then
                echo "Balance too low! expected: >= 33 ETH, got: $balance Gwei"
                exit 1
              fi

              effective_balance=$(echo "$validator" | jq -r '.validator.effective_balance')
              if [ "$effective_balance" -lt "33000000000" ]; then
                echo "Effective balance too low! expected: >= 33 ETH, got: $effective_balance Gwei"
                exit 1
              fi

              withdrawal_creds=$(echo "$validator" | jq -r '.validator.withdrawal_credentials')
              echo "Withdrawal credentials: $withdrawal_creds"

              if [[ ! "$withdrawal_creds" == "0x02"* ]]; then
                echo "Invalid withdrawal credentials! expected: 0x02*, got: $withdrawal_creds"
                exit 1
              fi

        # generate withdrawal & wait for inclusion
        - name: run_task_background
          title: "Generate EL triggered partial withdrawal for key 4 & track inclusion"
          timeout: 10m
          config:
            onBackgroundComplete: failOrIgnore
            backgroundTask:
              name: generate_withdrawal_requests
              title: "Send EL triggered withdrawal transaction for key 4"
              config:
                limitTotal: 1
                withdrawAmount: 1000000000 # 1 ETH
                awaitReceipt: true
                failOnReject: true
              configVars:
                sourcePubkey: "tasks.validator_pubkeys.outputs.pubkeys[4]"
                walletPrivkey: "walletPrivkey"
            foregroundTask:
              name: check_consensus_block_proposals
              title: "Wait for inclusion of EL triggered withdrawal request for key 4"
              config:
                minWithdrawalRequestCount: 1
              configVars:
                expectWithdrawalRequests: "| [{validatorPubkey: .tasks.validator_pubkeys.outputs.pubkeys[4], sourceAddress: .tasks.wallet_details.outputs.address, amount: 1000000000}]"

        # wait for withdrawal to be processed
        - name: check_consensus_block_proposals
          title: "Check for exact 1 ETH withdrawal for key 4"
          timeout: 2h
          config:
            minWithdrawalCount: 1
          configVars:
            expectWithdrawals: "| [{publicKey: .tasks.validator_pubkeys.outputs.pubkeys[4], address: .tasks.wallet_details.outputs.address, minAmount: 1000000000, maxAmount: 1000000000}]"


    # Test6: Submit a partial 2 ETH withdrawal request from an address with 0x02 credentials and balance < 34 ETH, assert < 2 ETH withdrawal
    # keys: 5
    - name: run_tasks
      title: "Test6: Submit a partial 1 ETH withdrawal request from an address with 0x02 credentials and balance < 34 ETH, assert < 2 ETH withdrawal"
      config:
        tasks:
        # generate BLS changes & wait for inclusion
        - name: run_task_background
          title: "Generate BLS change for key 5 & track inclusion"
          timeout: 10m
          config:
            onBackgroundComplete: failOrIgnore
            backgroundTask:
              name: generate_bls_changes
              title: "Send BLS change for key 5 (0x02 credentials)"
              config:
                limitTotal: 1
                indexCount: 1
              configVars:
                mnemonic: "validatorMnemonic"
                targetAddress: "tasks.wallet_details.outputs.address"
                startIndex: "validatorStartIndex + 5"
            foregroundTask:
              name: check_consensus_block_proposals
              title: "Wait for inclusion of BLS change for key 5"
              config:
                minBlsChangeCount: 1
              configVars:
                expectBlsChanges: "| [{publicKey: .tasks.validator_pubkeys.outputs.pubkeys[5], address: .tasks.wallet_details.outputs.address}]"

        # generate self consolidation for key 5 & wait for inclusion
        - name: run_task_background
          title: "Generate self consolidation for key 5 & track inclusion"
          timeout: 10m
          config:
            onBackgroundComplete: failOrIgnore
            backgroundTask:
              name: generate_consolidations
              title: "Generate 1 self consolidation (key 5)"
              config:
                limitTotal: 1
                sourceIndexCount: 1
                awaitReceipt: true
                failOnReject: true
              configVars:
                sourceMnemonic: "validatorMnemonic"
                targetPublicKey: "tasks.validator_pubkeys.outputs.pubkeys[5]"
                sourceStartIndex: "validatorStartIndex + 5"
                walletPrivkey: "walletPrivkey"

            foregroundTask:
              name: check_consensus_block_proposals
              title: "Wait for inclusion of self consolidation request for key 5"
              config:
                minConsolidationRequestCount: 1
              configVars:
                expectConsolidationRequests: "| [{sourceAddress: .tasks.wallet_details.outputs.address, sourcePubkey: .tasks.validator_pubkeys.outputs.pubkeys[5]}]"

        # generate top-up deposit for key 5 (add 1 ETH) & wait for inclusion
        - name: run_task_background
          title: "Generate top-up deposit for key 5 & track inclusion"
          timeout: 10m
          config:
            onBackgroundComplete: failOrIgnore
            backgroundTask:
              name: generate_deposits
              title: "Generate top-up deposit for key 5"
              config:
                limitTotal: 1
                indexCount: 1
                depositAmount: 1
                awaitReceipt: true
                failOnReject: true
                topUpDeposit: true
              configVars:
                publicKey: "tasks.validator_pubkeys.outputs.pubkeys[5]"
                walletPrivkey: "walletPrivkey"
                depositContract: "depositContract"
            foregroundTask:
              name: check_consensus_block_proposals
              title: "Wait for inclusion of top-up deposit for key 5"
              config:
                minDepositRequestCount: 1
              configVars:
                expectDepositRequests: "| [{publicKey: .tasks.validator_pubkeys.outputs.pubkeys[5], amount: 1000000000}]"

        # check if key 5 has 0x02 credentials and topped up balance
        - name: check_consensus_validator_status
          title: "Get validator info for key 5 (expect 0x02 credentials)"
          id: key5_status
          timeout: 4h
          config:
            withdrawalCredsPrefix: "0x02"
            validatorStatus:
            - active_ongoing
            minValidatorBalance: 32900000000
          configVars:
            validatorPubKey: "tasks.validator_pubkeys.outputs.pubkeys[5]"
        - name: run_shell
          title: "Check if key 5 has 0x02 credentials"
          config:
            envVars:
              validator: "tasks.key5_status.outputs.validator"
            command: |
              balance=$(echo "$validator" | jq -r '.balance')
              echo "Balance: $balance"

              if [ "$balance" -gt 33500000000 ]; then
                echo "Balance too high! expected: <= 33.5 ETH, got: $balance Gwei"
                exit 1
              fi

              effective_balance=$(echo "$validator" | jq -r '.validator.effective_balance')
              if [ "$effective_balance" -gt "33000000000" ]; then
                echo "Effective balance too high! expected: <= 33 ETH, got: $effective_balance Gwei"
                exit 1
              fi

              withdrawal_creds=$(echo "$validator" | jq -r '.validator.withdrawal_credentials')
              echo "Withdrawal credentials: $withdrawal_creds"

              if [[ ! "$withdrawal_creds" == "0x02"* ]]; then
                echo "Invalid withdrawal credentials! expected: 0x02*, got: $withdrawal_creds"
                exit 1
              fi

        # generate withdrawal & wait for inclusion
        - name: run_task_background
          title: "Generate EL triggered partial withdrawal for key 5 & track inclusion"
          timeout: 10m
          config:
            onBackgroundComplete: failOrIgnore
            backgroundTask:
              name: generate_withdrawal_requests
              title: "Send EL triggered withdrawal transaction for key 5"
              config:
                limitTotal: 1
                withdrawAmount: 2000000000 # 2 ETH
                awaitReceipt: true
                failOnReject: true
              configVars:
                sourcePubkey: "tasks.validator_pubkeys.outputs.pubkeys[5]"
                walletPrivkey: "walletPrivkey"
            foregroundTask:
              name: check_consensus_block_proposals
              title: "Wait for inclusion of EL triggered withdrawal request for key 5"
              config:
                minWithdrawalRequestCount: 1
              configVars:
                expectWithdrawalRequests: "| [{validatorPubkey: .tasks.validator_pubkeys.outputs.pubkeys[5], sourceAddress: .tasks.wallet_details.outputs.address, amount: 2000000000}]"

        # check chain for 30 minutes, expect withdrawal with >= 0.5 ETH & < 1.5 ETH for key 5
        - name: check_consensus_block_proposals
          title: "Check withdrawal for key 5 (expect in range 0.5-1.5 ETH)"
          timeout: 2h
          id: key5_withdrawal
          config:
            minWithdrawalCount: 1
          configVars:
            expectWithdrawals: "| [{publicKey: .tasks.validator_pubkeys.outputs.pubkeys[5], address: .tasks.wallet_details.outputs.address, minAmount: 50000000}]"

    # Test7: Multiple withdrawal requests and exits for keys 6 & 7
    # keys: 6, 7
    - name: run_tasks
      title: "Test7: Multiple withdrawal requests and exits for keys 6 & 7"
      config:
        tasks:

        - name: run_tasks_concurrent
          title: "Prepare keys 6 & 7"
          config:
            tasks:
            - name: run_tasks
              title: "Prepare key 6 (BLS change, self consolidation, top-up deposit)"
              config:
                tasks:
                # generate BLS changes & wait for inclusion
                - name: run_task_background
                  title: "Generate BLS change for key 6 & track inclusion"
                  timeout: 10m
                  config:
                    onBackgroundComplete: failOrIgnore
                    backgroundTask:
                      name: generate_bls_changes
                      title: "Send BLS change for key 6 (0x02 credentials)"
                      config:
                        limitTotal: 1
                        indexCount: 1
                      configVars:
                        mnemonic: "validatorMnemonic"
                        targetAddress: "tasks.wallet_details.outputs.address"
                        startIndex: "validatorStartIndex + 6"
                    foregroundTask:
                      name: check_consensus_block_proposals
                      title: "Wait for inclusion of BLS change for key 6"
                      config:
                        minBlsChangeCount: 1
                      configVars:
                        expectBlsChanges: "| [{publicKey: .tasks.validator_pubkeys.outputs.pubkeys[6], address: .tasks.wallet_details.outputs.address}]"

                # generate self consolidation for key 6 & wait for inclusion
                - name: run_task_background
                  title: "Generate self consolidation for key 6 & track inclusion"
                  timeout: 10m
                  config:
                    onBackgroundComplete: failOrIgnore
                    backgroundTask:
                      name: generate_consolidations
                      title: "Generate 1 self consolidation (key 6)"
                      config:
                        limitTotal: 1
                        sourceIndexCount: 1
                        awaitReceipt: true
                        failOnReject: true
                      configVars:
                        sourceMnemonic: "validatorMnemonic"
                        targetPublicKey: "tasks.validator_pubkeys.outputs.pubkeys[6]"
                        sourceStartIndex: "validatorStartIndex + 6"
                        walletPrivkey: "walletPrivkey"

                    foregroundTask:
                      name: check_consensus_block_proposals
                      title: "Wait for inclusion of self consolidation request for key 6"
                      config:
                        minConsolidationRequestCount: 1
                      configVars:
                        expectConsolidationRequests: "| [{sourceAddress: .tasks.wallet_details.outputs.address, sourcePubkey: .tasks.validator_pubkeys.outputs.pubkeys[6]}]"

                - name: run_task_background
                  title: "Generate top-up deposit for key 6 & track inclusion"
                  timeout: 10m
                  config:
                    onBackgroundComplete: failOrIgnore
                    backgroundTask:
                      name: generate_deposits
                      title: "Generate top-up deposit for key 6"
                      config:
                        limitTotal: 1
                        indexCount: 1
                        depositAmount: 10
                        awaitReceipt: true
                        failOnReject: true
                        topUpDeposit: true
                      configVars:
                        publicKey: "tasks.validator_pubkeys.outputs.pubkeys[6]"
                        walletPrivkey: "walletPrivkey"
                        depositContract: "depositContract"
                    foregroundTask:
                      name: check_consensus_block_proposals
                      title: "Wait for inclusion of top-up deposit for key 6"
                      config:
                        minDepositRequestCount: 1
                      configVars:
                        expectDepositRequests: "| [{publicKey: .tasks.validator_pubkeys.outputs.pubkeys[6], amount: 10000000000}]"

            - name: run_tasks
              title: "Prepare key 7 (BLS change, self consolidation, top-up deposit)"
              config:
                tasks:
                # generate BLS changes & wait for inclusion
                - name: run_task_background
                  title: "Generate BLS change for key 7 & track inclusion"
                  timeout: 10m
                  config:
                    onBackgroundComplete: failOrIgnore
                    backgroundTask:
                      name: generate_bls_changes
                      title: "Send BLS change for key 7 (0x02 credentials)"
                      config:
                        limitTotal: 1
                        indexCount: 1
                      configVars:
                        mnemonic: "validatorMnemonic"
                        targetAddress: "tasks.wallet_details.outputs.address"
                        startIndex: "validatorStartIndex + 7"
                    foregroundTask:
                      name: check_consensus_block_proposals
                      title: "Wait for inclusion of BLS change for key 7"
                      config:
                        minBlsChangeCount: 1
                      configVars:
                        expectBlsChanges: "| [{publicKey: .tasks.validator_pubkeys.outputs.pubkeys[7], address: .tasks.wallet_details.outputs.address}]"

                # generate self consolidation for key 7 & wait for inclusion
                - name: run_task_background
                  title: "Generate self consolidation for key 7 & track inclusion"
                  timeout: 10m
                  config:
                    onBackgroundComplete: failOrIgnore
                    backgroundTask:
                      name: generate_consolidations
                      title: "Generate 1 self consolidation (key 7)"
                      config:
                        limitTotal: 1
                        sourceIndexCount: 1
                        awaitReceipt: true
                        failOnReject: true
                      configVars:
                        sourceMnemonic: "validatorMnemonic"
                        targetPublicKey: "tasks.validator_pubkeys.outputs.pubkeys[7]"
                        sourceStartIndex: "validatorStartIndex + 7"
                        walletPrivkey: "walletPrivkey"

                    foregroundTask:
                      name: check_consensus_block_proposals
                      title: "Wait for inclusion of self consolidation request for key 7"
                      config:
                        minConsolidationRequestCount: 1
                      configVars:
                        expectConsolidationRequests: "| [{sourceAddress: .tasks.wallet_details.outputs.address, sourcePubkey: .tasks.validator_pubkeys.outputs.pubkeys[7]}]"

                - name: run_task_background
                  title: "Generate top-up deposit for key 7 & track inclusion"
                  timeout: 10m
                  config:
                    onBackgroundComplete: failOrIgnore
                    backgroundTask:
                      name: generate_deposits
                      title: "Generate top-up deposit for key 7"
                      config:
                        limitTotal: 1
                        indexCount: 1
                        depositAmount: 10
                        awaitReceipt: true
                        failOnReject: true
                        topUpDeposit: true
                      configVars:
                        publicKey: "tasks.validator_pubkeys.outputs.pubkeys[7]"
                        walletPrivkey: "walletPrivkey"
                        depositContract: "depositContract"
                    foregroundTask:
                      name: check_consensus_block_proposals
                      title: "Wait for inclusion of top-up deposit for key 7"
                      config:
                        minDepositRequestCount: 1
                      configVars:
                        expectDepositRequests: "| [{publicKey: .tasks.validator_pubkeys.outputs.pubkeys[7], amount: 10000000000}]"

        # wait for topup deposit to be processed
        - name: check_consensus_validator_status
          title: "Wait for key 6 balance to increase > 41 ETH"
          id: key6_status
          timeout: 4h
          config:
            validatorStatus:
            - active_ongoing
            minValidatorBalance: 41000000000
            withdrawalCredsPrefix: "0x02"
          configVars:
            validatorPubKey: "tasks.validator_pubkeys.outputs.pubkeys[6]"

        - name: check_consensus_validator_status
          title: "Wait for key 7 balance to increase > 41 ETH"
          id: key7_status
          timeout: 4h
          config:
            validatorStatus:
            - active_ongoing
            minValidatorBalance: 41000000000
            withdrawalCredsPrefix: "0x02"
          configVars:
            validatorPubKey: "tasks.validator_pubkeys.outputs.pubkeys[7]"

        # generate multiple withdrawal requests for key 6 & 7 for the same slot
        - name: run_tasks_concurrent
          title: "Generate multiple withdrawal requests for key 6 & 7 for the same slot"
          config:
            tasks:
            - name: run_task_background
              title: "Generate EL triggered partial withdrawal #1 for key 6 & track inclusion"
              timeout: 10m
              config:
                onBackgroundComplete: failOrIgnore
                backgroundTask:
                  name: generate_withdrawal_requests
                  title: "Send EL triggered withdrawal transaction for key 6"
                  config:
                    limitTotal: 1
                    withdrawAmount: 1000000000 # 1 ETH
                    awaitReceipt: true
                    failOnReject: true
                  configVars:
                    sourcePubkey: "tasks.validator_pubkeys.outputs.pubkeys[6]"
                    walletPrivkey: "walletPrivkey"
                foregroundTask:
                  name: check_consensus_block_proposals
                  title: "Wait for inclusion of EL triggered withdrawal request for key 6"
                  config:
                    minWithdrawalRequestCount: 1
                  configVars:
                    expectWithdrawalRequests: "| [{validatorPubkey: .tasks.validator_pubkeys.outputs.pubkeys[6], sourceAddress: .tasks.wallet_details.outputs.address, amount: 1000000000}]"
            - name: run_task_background
              title: "Generate EL triggered partial withdrawal #2 for key 6 & track inclusion"
              timeout: 10m
              config:
                onBackgroundComplete: failOrIgnore
                backgroundTask:
                  name: generate_withdrawal_requests
                  title: "Send EL triggered withdrawal transaction for key 6"
                  config:
                    limitTotal: 1
                    withdrawAmount: 1100000000 # 1 ETH
                    awaitReceipt: true
                    failOnReject: true
                  configVars:
                    sourcePubkey: "tasks.validator_pubkeys.outputs.pubkeys[6]"
                    walletPrivkey: "walletPrivkey"
                foregroundTask:
                  name: check_consensus_block_proposals
                  title: "Wait for inclusion of EL triggered withdrawal request for key 6"
                  config:
                    minWithdrawalRequestCount: 1
                  configVars:
                    expectWithdrawalRequests: "| [{validatorPubkey: .tasks.validator_pubkeys.outputs.pubkeys[6], sourceAddress: .tasks.wallet_details.outputs.address, amount: 1100000000}]"
            - name: run_task_background
              title: "Generate EL triggered partial withdrawal #1 for key 7 & track inclusion"
              timeout: 10m
              config:
                onBackgroundComplete: failOrIgnore
                backgroundTask:
                  name: generate_withdrawal_requests
                  title: "Send EL triggered withdrawal transaction for key 7"
                  config:
                    limitTotal: 1
                    withdrawAmount: 1000000000 # 1 ETH
                    awaitReceipt: true
                    failOnReject: true
                  configVars:
                    sourcePubkey: "tasks.validator_pubkeys.outputs.pubkeys[7]"
                    walletPrivkey: "walletPrivkey"
                foregroundTask:
                  name: check_consensus_block_proposals
                  title: "Wait for inclusion of EL triggered withdrawal request for key 7"
                  config:
                    minWithdrawalRequestCount: 1
                  configVars:
                    expectWithdrawalRequests: "| [{validatorPubkey: .tasks.validator_pubkeys.outputs.pubkeys[7], sourceAddress: .tasks.wallet_details.outputs.address, amount: 1000000000}]"
            - name: run_task_background
              title: "Generate EL triggered partial withdrawal #2 for key 7 & track inclusion"
              timeout: 10m
              config:
                onBackgroundComplete: failOrIgnore
                backgroundTask:
                  name: generate_withdrawal_requests
                  title: "Send EL triggered withdrawal transaction for key 7"
                  config:
                    limitTotal: 1
                    withdrawAmount: 1100000000 # 1 ETH
                    awaitReceipt: true
                    failOnReject: true
                  configVars:
                    sourcePubkey: "tasks.validator_pubkeys.outputs.pubkeys[7]"
                    walletPrivkey: "walletPrivkey"
                foregroundTask:
                  name: check_consensus_block_proposals
                  title: "Wait for inclusion of EL triggered withdrawal request for key 7"
                  config:
                    minWithdrawalRequestCount: 1
                  configVars:
                    expectWithdrawalRequests: "| [{validatorPubkey: .tasks.validator_pubkeys.outputs.pubkeys[7], sourceAddress: .tasks.wallet_details.outputs.address, amount: 1100000000}]"


        # send exit request for key 6
        - name: run_task_background
          title: "Generate EL triggered exit for key 6 & track inclusion"
          timeout: 10m
          config:
            onBackgroundComplete: failOrIgnore
            backgroundTask:
              name: generate_withdrawal_requests
              title: "Send EL triggered exit transaction for key 6"
              config:
                limitTotal: 1
                withdrawAmount: 0 # 0 ETH - exit
                awaitReceipt: true
                failOnReject: true
              configVars:
                sourcePubkey: "tasks.validator_pubkeys.outputs.pubkeys[6]"
                walletPrivkey: "walletPrivkey"
            foregroundTask:
              name: check_consensus_block_proposals
              title: "Wait for inclusion of EL triggered exit request for key 6"
              config:
                minWithdrawalRequestCount: 1
              configVars:
                expectWithdrawalRequests: "| [{validatorPubkey: .tasks.validator_pubkeys.outputs.pubkeys[6], sourceAddress: .tasks.wallet_details.outputs.address, amount: 0}]"

        # send voluntary exit for key 7
        - name: run_task_options
          title: "Expect failure for voluntary exit for key 7"
          config:
            ignoreFailure: true
            task:
              name: generate_exits
              title: "Send voluntary exit transaction for key 7"
              config:
                limitTotal: 1
                indexCount: 1
              configVars:
                mnemonic: "validatorMnemonic"
                startIndex: "validatorStartIndex + 7"

        # wait for withdrawal for key 6 & 7
        - name: run_tasks_concurrent
          title: "Wait for all withdrawals for key 6 & 7"
          config:
            tasks:
            - name: check_consensus_block_proposals
              title: "Check withdrawal for key 6 (expect 1 ETH)"
              timeout: 2h
              config:
                minWithdrawalCount: 1
              configVars:
                expectWithdrawals: "| [{publicKey: .tasks.validator_pubkeys.outputs.pubkeys[6], address: .tasks.wallet_details.outputs.address, minAmount: 1000000000, maxAmount: 1000000000}]"
            - name: check_consensus_block_proposals
              title: "Check withdrawal for key 7 (expect 1 ETH)"
              timeout: 2h
              config:
                minWithdrawalCount: 1
              configVars:
                expectWithdrawals: "| [{publicKey: .tasks.validator_pubkeys.outputs.pubkeys[7], address: .tasks.wallet_details.outputs.address, minAmount: 1000000000, maxAmount: 1000000000}]"

    # Test8:

    # Test9:

    # Test10:


cleanupTasks:
- name: run_tasks
  title: "Generate BLS changes, & exit all test validators"
  if: "useExistingValidators == false"
  config:
    stopChildOnResult: false
    tasks:
    - name: generate_bls_changes
      title: "Generate bls changes for all test validators"
      config:
        limitTotal: 10
        indexCount: 10
      configVars:
        mnemonic: "validatorMnemonic"
        targetAddress: "tasks.wallet_details.outputs.address"
    - name: generate_exits
      title: "Exit all test validators"
      config:
        limitTotal: 10
        indexCount: 10
      configVars:
        mnemonic: "validatorMnemonic"
